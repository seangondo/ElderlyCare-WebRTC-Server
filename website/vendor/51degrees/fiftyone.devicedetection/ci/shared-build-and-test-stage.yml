# Template for build and test stage, which tests api on specified agent for different versions of php.

parameters:
# buildType: Options: Development or Production 
# Development: Build and test stage will use submodule references for 
# dependencies where the dependency is relative to the local file system
# Production: Build and test stage will use the publically released packages.
# imageName: agent to run the stage on
- name: buildType
- name: imageName
- name: runTests
  type: string
  default: 'On'

stages:

# Get datafile stage, this datafile will be used in the test cases to get all the properties list.
- stage: Data
  jobs:
  - job: Get_TAC_CSV_DataFile
    displayName: Get TAC CSV DataFile
    condition: ne(${{ parameters.runTests }}, 'Off')
    
    pool:
      vmImage: ${{ parameters.imageName }}

    variables: 
      - group: InternalKeys

    steps:
    - task: Bash@3
      displayName: 'Download TAC V4 CSV data file'
      inputs:
        targetType: 'inline'
        script: 'wget "https://distributor.51degrees.com/api/v2/download?LicenseKeys=$(DeviceDetectionLicenseKey)&Type=21&Download=True&Product=23" -O "$(Build.SourcesDirectory)/51Degrees-Tac.zip"'
  
    - task: Bash@3
      displayName: 'Extract TAC V4 CSV data file'
      inputs:
        targetType: 'inline'
        script: 'unzip -p $(Build.SourcesDirectory)/51Degrees-Tac.zip 51Degrees-Tac-All.csv > $(Build.ArtifactStagingDirectory)/51Degrees.csv'
        workingDirectory: '$(Build.SourcesDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'tacFile'
        publishLocation: 'Container'
        
- stage: Build_and_Test
  dependsOn: [Data]
  
  jobs:
  
  - job: Build_And_Test
    displayName: Build and Test
    condition: ne(${{ parameters.runTests }}, 'Off')

    strategy:
      matrix:
        PHP 5.6:
          phpVersion: 5.6
        PHP 7.2:
          phpVersion: 7.2
        PHP 7.3:
          phpVersion: 7.3
        PHP 7.4:
          phpVersion: 7.4
        PHP 8.0:
          phpVersion: 8.0

    pool:
      vmImage: ${{ parameters.imageName }}

    variables: 
      - group: InternalKeys

    steps:
    - checkout: self
      submodules: recursive
      lfs: true
      persistCredentials: true

    - script: |
        sudo composer self-update --2.2
      displayName: 'Use Composer 2.2'
      condition: eq(variables['phpVersion'], '5.6')

    # Install php and set as default Version to be used in the next tasks.
    - script: |
        sudo add-apt-repository ppa:ondrej/php
        sudo apt-get update -y
        sudo apt-get install -y php$(phpVersion)-dev
        sudo apt-get install -y php$(phpVersion)-phpdbg
        sudo apt-get install -y php$(phpVersion)-cgi
        sudo apt-get install -y php$(phpVersion)-xml
        sudo apt-get install -y php$(phpVersion)-mbstring

        sudo update-alternatives --set php /usr/bin/php$(phpVersion)
        sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
        sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
        sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
        sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)

        export versionc=`php -version | grep -Fc "$(phpVersion)"`
        if [ $versionc -eq 0 ]; then
          echo "Failed to install correct php version $(phpVersion)"
          exit 1
        fi

        php -version
      displayName: 'Use PHP version $(phpVersion)'
      
    # Download datafile published in the Data stage       
    - task: DownloadBuildArtifacts@0
      displayName: 'Download TAC CSV File'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'tacFile'
        downloadPath: '$(System.ArtifactsDirectory)'
     
    - script: |
        mv $(System.ArtifactsDirectory)/tacFile/51Degrees.csv  $(Build.SourcesDirectory)/tests/51Degrees.csv
      displayName: 'Move TAC data File'
      failOnStderr: true
 
    # Install Pipeline Dependencies based on the buildType parameter. 
    - script: |
        echo "Build Type ${{ parameters.buildType }}."
        if [ "${{ parameters.buildType }}" = "Development" ]; then
          echo "Test Development Pipeline."
          cd pipeline-php-engines
          mv composer-dev.json composer.json
          if [ $? -ne 0 ]; then
            echo "Failed to update composer.json with development version for submodule pipeline-php-engines."
            exit 1
          fi
          cd ..

          cd pipeline-php-cloudrequestengine
          mv composer-dev.json composer.json
          if [ $? -ne 0 ]; then
            echo "Failed to update composer.json with development version for submodule pipeline-php-cloudrequestengine."
            exit 1
          fi
          cd ..

          mv composer-dev.json composer.json
          if [ $? -ne 0 ]; then
            echo "Failed to update composer.json with development version."
            exit 1
          fi
        else
          echo "Test Production Pipeline."
        fi

        composer install --no-interaction --prefer-dist -v
      displayName: 'Install dependencies'
    
    - script: |
        sudo rm -r /usr/local/bin/phpunit
        wget -O phpunit https://phar.phpunit.de/phpunit-5.phar
        chmod +x phpunit
        sudo mv phpunit /usr/local/bin/phpunit
      displayName: 'install PHPUnit 5'
      condition: eq(variables['phpVersion'], '5.6')

    # Set resource key environment variable from resource key value 
    # in 'InternalKeys' group       
    - script: |
        sed -i 's,.*name="RESOURCEKEY".*$,<env name="RESOURCEKEY" value="$(SuperResourceKey)" force="true"/>,' phpunit.xml
        sed -i 's,.*name="FOD_CLOUD_API_URL".*$,<env name="FOD_CLOUD_API_URL" value="$(FOD_CLOUD_API_URL)" force="true"/>,' phpunit.xml
        sed -i 's,.*name="AcceptChPlatformKey".*$,<env name="AcceptChPlatformKey" value="$(AcceptChPlatformKey)" force="true"/>,' phpunit.xml
        sed -i 's,.*name="AcceptChHardwareKey".*$,<env name="AcceptChHardwareKey" value="$(AcceptChHardwareKey)" force="true"/>,' phpunit.xml
        sed -i 's,.*name="AcceptChBrowserKey".*$,<env name="AcceptChBrowserKey" value="$(AcceptChBrowserKey)" force="true"/>,' phpunit.xml
        sed -i 's,.*name="AcceptChNoneKey".*$,<env name="AcceptChNoneKey" value="$(AcceptChNoneKey)" force="true"/>,' phpunit.xml
        cat phpunit.xml
      displayName: 'Set resource key and cloud endpoint'
      failOnStderr: true
      
    - script: |
        phpunit --log-junit test-results.xml
      displayName: 'Run tests with phpunit'
      failOnStderr: false
      
    # Publish Test Results to Azure Pipelines/TFS
    - task: PublishTestResults@2
      inputs:
        testRunner: 'JUnit'
        testResultsFiles: '**/test-results.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: false
        testRunTitle: '$(phpVersion)'
        failTaskOnFailedTests: true
      condition: always()
