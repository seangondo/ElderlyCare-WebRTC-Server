# Template for build and test stage, which tests api on specified agent for different versions of php.

parameters:
# buildType: Options: Development or Production 
# Development: Build and test stage will use submodule references for 
# dependencies where the dependency is relative to the local file system
# Production: Build and test stage will use the publically released packages.
# imageName: agent to run the stage on
- name: buildType
- name: imageName
- name: runTests
  type: string
  default: 'On'

stages:
- stage: Build_and_Test

  jobs:
  - job: Build_and_Test
    condition: ne(${{ parameters.runTests }}, 'Off')
    pool:
      vmImage: ${{ parameters.imageName }}

    strategy:
      matrix:
        PHP 5.6:
          phpVersion: 5.6
        PHP 7.2:
          phpVersion: 7.2
        PHP 7.3:
          phpVersion: 7.3
        PHP 7.4:
          phpVersion: 7.4
        Linux PHP 8.0:
          phpVersion: 8.0

    steps:
    - checkout: self
      submodules: recursive
      lfs: true
      persistCredentials: true

    # Composer >= 2.3 does not support PHP < 7.2.5
    - script: |
        sudo composer self-update --2.2
      displayName: 'Use Composer 2.2'
      condition: eq(variables['phpVersion'], '5.6')

    # Install php and set as default Version to be used in the next tasks.
    - script: |
        sudo add-apt-repository ppa:ondrej/php
        sudo apt-get update -y
        sudo apt-get install -y php$(phpVersion)-dev
        sudo apt-get install -y php$(phpVersion)-xml
        sudo apt-get install -y php$(phpVersion)-mbstring
        sudo update-alternatives --set php /usr/bin/php$(phpVersion)
        sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
        sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)

        export versionc=`php -version | grep -Fc "$(phpVersion)"`
        if [ $versionc -eq 0]; then
          echo "Failed to install correct php version $(phpVersion)"
          exit 1
        else
          echo "PHP $(phpVersion) installed."
        fi
        php -version
      displayName: 'Use PHP version $(phpVersion)'

    # Install Pipeline Dependencies based on the buildType parameter. 
    - script: |
        echo "Build Type ${{ parameters.buildType }}."
        if [ "${{ parameters.buildType }}" = "Development" ]; then
          echo "Test Development Pipeline."
          mv composer-dev.json composer.json
          if [ $? -ne 0 ]; then
            echo "Failed to update composer.json with development version."
            exit 1
          fi
        else
          echo "Test Production Pipeline."
        fi

        composer install --no-interaction --prefer-dist 
      displayName: 'Install dependencies'

    - script: |
        sudo rm -r /usr/local/bin/phpunit
        wget -O phpunit https://phar.phpunit.de/phpunit-5.phar
        chmod +x phpunit
        sudo mv phpunit /usr/local/bin/phpunit
      displayName: 'install PHPUnit 5'
      condition: eq(variables['phpVersion'], '5.6')
      
    - script: |
        phpunit --log-junit test-results.xml
      displayName: 'Run tests with phpunit'
      failOnStderr: true
      
    # Publish Test Results to Azure Pipelines/TFS
    - task: PublishTestResults@2
      inputs:
        testRunner: 'JUnit'
        testResultsFiles: '**/test-results.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: false
        testRunTitle: '$(phpVersion)'
        failTaskOnFailedTests: true
      condition: always()
